namespace TestDb.Models
{
    public class Student : OwnableEntity
    {
        public int StudentId { get; set; }
        public string StudentFirstName { get; set; }
        public string StudentLastName { get; set; }
        public string StudentEmail { get; set; }
        // Navigation property for the course
        public virtual Course Course { get; set; }
        public virtual ICollection<Document> Documents { get; set; }
    }
}

namespace TestDb.Models
{
    public class Module : OwnableEntity
    {
        public int ModuleId { get; set; }
        public string ModuleName { get; set; }
        public string ModuleDescription { get; set; }
        public DateTime ModuleStartDate { get; set; }
        public DateTime? ModuleEndDate { get; set; }

        // Navigation property for the course
        public virtual Course Course { get; set; }

        // Navigation property for the activities
        public virtual ICollection<Activity> Activities { get; set; }
        public virtual ICollection<Document> Documents { get; set; }
        public int CourseId { get; set; }
    }
}
namespace TestDb.Models
{
    public class Course : OwnableEntity
    {
        public int CourseId { get; set; }
        public string CourseName { get; set; }
        public string CourseDescription { get; set; }
        public DateTime CourseStartDate { get; set; }

        // Navigation property for the student
        public virtual Student Student { get; set; }

        // Navigation property for the modules
        public virtual ICollection<Module> Modules { get; set; }
        public virtual ICollection<Document> Documents { get; set; }
        public int StudentId { get; set; }
    }
}

using System.ComponentModel.DataAnnotations;

namespace TestDb.Models
{
    public class Activity : OwnableEntity
    {
        public int ActivityId { get; set; }
        [Required]
        public string ActivityType { get; set; }
        [Required]
        [StringLength(15, ErrorMessage = "Name is required (up to 15 charaters")]
        public string ActivityName { get; set; }
        public string? ActivityDescription { get; set; }
        [Required]
        public DateTime ActivityStartDate { get; set; } = DateTime.Now;
        public DateTime? ActivityEndDate { get; set; } // Nullable (for now) - course have no end date in specs.

        // Navigation property for the module
        public virtual Module Module { get; set; }

        // Navigation property for the documents
        public virtual ICollection<Document> Documents { get; set; }

        // Foreign key for the module
        public int ModuleId { get; set; }
    }
}


-----------
// polymorphic associations for documents
//modelBuilder.Entity<Document>()
//    .HasMany(d => d.OwnableEntity)
//    .WithOne()
//    .HasForeignKey("OwnerId");

//// Configure the specific owners (Student, Course, Module, Activity)
//modelBuilder.Entity<Student>().HasMany(s => s.OwnedDocuments).WithOne().HasForeignKey("OwnerId");
//modelBuilder.Entity<Course>().HasMany(c => c.OwnedDocuments).WithOne().HasForeignKey("OwnerId");
//modelBuilder.Entity<Module>().HasMany(m => m.OwnedDocuments).WithOne().HasForeignKey("OwnerId");
//modelBuilder.Entity<Activity>().HasMany(a => a.OwnedDocuments).WithOne().HasForeignKey("OwnerId");



//modelBuilder.Entity<Document>()
//    .HasMany(d => d.OwnableEntity)
//    .UsingEntity<OwnableEntity>(j =>
//    {
//        j.HasKey(k => new { k.OwnerId, k.DocumentId });
//        j.HasOne(typeof(Student), "OwnerId").WithMany().HasForeignKey("OwnerId");
//        j.HasOne(typeof(Course), "OwnerId").WithMany().HasForeignKey("OwnerId");
//        j.HasOne(typeof(Module), "OwnerId").WithMany().HasForeignKey("OwnerId");
//        j.HasOne(typeof(Activity), "OwnerId").WithMany().HasForeignKey("OwnerId");
//    });
//modelBuilder.Entity<Document>()
//    .HasMany(d => d.OwnableEntity)
//    .UsingEntity<OwnableEntity>(j =>
//    {
//        j.HasKey(k => new { k.OwnerId, k.DocumentId });
//        j.HasOne(typeof(Student), "OwnerId").WithMany().HasForeignKey("OwnerId");
//        j.HasOne(typeof(Course), "OwnerId").WithMany().HasForeignKey("OwnerId");
//        j.HasOne(typeof(Module), "OwnerId").WithMany().HasForeignKey("OwnerId");
//        j.HasOne(typeof(Activity), "OwnerId").WithMany().HasForeignKey("OwnerId");
//    });


            modelBuilder.Entity<Student>()
                .HasOne(s => s.Course)
                .WithMany(c => c.Students)
                .HasForeignKey("CourseId");

            modelBuilder.Entity<Course>()
                .HasMany(c => c.Modules)
                .WithOne(m => m.Course)
                .HasForeignKey(m => m.CourseId);

            modelBuilder.Entity<Module>()
                .HasMany(m => m.Activities)
                .WithOne(a => a.Module)
                .HasForeignKey(a => a.ModuleId);

            modelBuilder.Entity<Activity>()
                .HasOne(a => a.Module)
                .WithMany(m => m.Activities)
                .HasForeignKey(a => a.ModuleId);

            foreach (var entityType in new[] { typeof(Student), typeof(Course), typeof(Module), typeof(Activity) })
            {
                modelBuilder.Entity(entityType)
                    .HasMany(s => s.OwnedDocuments)
                    .WithOne()
                    .HasForeignKey(e => e.OwnerId);
            }

            // Configure the Document entity to ensure it can only have one owner
            modelBuilder.Entity<Document>()
                .HasKey(d => d.DocumentId);